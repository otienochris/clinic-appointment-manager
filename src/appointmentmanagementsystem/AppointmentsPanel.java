/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package appointmentmanagementsystem;

import java.util.List;
import java.util.stream.Collectors;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author chris
 */
public class AppointmentsPanel extends javax.swing.JPanel {
    final String[] headersForAppointmentTable = {"ID", "TYPE", "PATIENT", "STAFF", "STATUS", "DATE", "TIME FROM", "TIME TO"};

    private final JFrame prevFrame;
    /**
     * Creates new form MainPanel
     * 
     * @param prevFrame - parent frame
     */
    public AppointmentsPanel(JFrame prevFrame) {
        this.prevFrame = prevFrame;
        initComponents();
        appointmentTypesCombo.setModel(new DefaultComboBoxModel<>(AppointmentManagementSystem.getEnumNames(AppointmentTypeEnum.class)));
        initializeAppointmentDetails();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        appointmentTypesCombo = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        txtDateFrom = new javax.swing.JTextField();
        dateFrom = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtDateTo = new javax.swing.JTextField();
        dateTo = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jButton5 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        appointmentsTable = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(1663, 885));
        setMinimumSize(new java.awt.Dimension(1663, 885));
        setPreferredSize(new java.awt.Dimension(1663, 885));

        jLabel4.setBackground(new java.awt.Color(0, 0, 0));
        jLabel4.setFont(new java.awt.Font("Monospaced", 3, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Filters:");

        jLabel2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel2.setFont(new java.awt.Font("Monospaced", 2, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("type:");

        appointmentTypesCombo.setBackground(new java.awt.Color(255, 255, 255));
        appointmentTypesCombo.setFont(new java.awt.Font("Monospaced", 2, 18)); // NOI18N
        appointmentTypesCombo.setForeground(new java.awt.Color(0, 0, 0));
        appointmentTypesCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MEDICAL CHECKUP", "TREATMENT", "ENQUIRY", "INJECTION", "COUNSELLING" }));

        jLabel5.setBackground(new java.awt.Color(0, 0, 0));
        jLabel5.setFont(new java.awt.Font("Monospaced", 2, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("from date:");

        txtDateFrom.setEditable(false);
        txtDateFrom.setBackground(new java.awt.Color(255, 255, 255));
        txtDateFrom.setFont(new java.awt.Font("Monospaced", 2, 18)); // NOI18N
        txtDateFrom.setForeground(new java.awt.Color(0, 0, 0));
        txtDateFrom.setFocusable(false);

        dateFrom.setText("select");
        dateFrom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateFromActionPerformed(evt);
            }
        });

        jLabel6.setBackground(new java.awt.Color(0, 0, 0));
        jLabel6.setFont(new java.awt.Font("Monospaced", 2, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("to date:");

        txtDateTo.setEditable(false);
        txtDateTo.setBackground(new java.awt.Color(255, 255, 255));
        txtDateTo.setFont(new java.awt.Font("Monospaced", 2, 18)); // NOI18N
        txtDateTo.setForeground(new java.awt.Color(0, 0, 0));
        txtDateTo.setFocusable(false);

        dateTo.setText("select");
        dateTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateToActionPerformed(evt);
            }
        });

        btnSearch.setBackground(new java.awt.Color(204, 102, 0));
        btnSearch.setFont(new java.awt.Font("Monospaced", 3, 24)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(255, 255, 255));
        btnSearch.setText("filter");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(204, 102, 0));
        jButton5.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("Today's Appointments");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel3.setBackground(new java.awt.Color(0, 0, 0));
        jLabel3.setFont(new java.awt.Font("Monospaced", 3, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(204, 102, 0));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Appointments");
        jLabel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 102, 0)));

        appointmentsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Type", "Title", "Description", "Date and time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        appointmentsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                appointmentsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(appointmentsTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(appointmentTypesCombo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(180, 180, 180)))
                                .addGap(56, 56, 56)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtDateFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(dateFrom)))
                                .addGap(39, 39, 39)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtDateTo)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(dateTo, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1364, Short.MAX_VALUE))
                .addContainerGap(293, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(txtDateTo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(dateTo, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtDateFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(dateFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(appointmentTypesCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(23, 23, 23)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 614, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void dateFromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateFromActionPerformed
        // TODO add your handling code here:
        txtDateFrom.setText(new DatePicker(prevFrame).setPickedDate());
    }//GEN-LAST:event_dateFromActionPerformed

    private void dateToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateToActionPerformed
        // TODO add your handling code here:
        txtDateTo.setText(new DatePicker(prevFrame).setPickedDate());
    }//GEN-LAST:event_dateToActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed

        List<String> appointments = AppointmentManagementSystem.getData(AppointmentManagementSystem.APPOINTMENT_FILE);
        if (appointments.isEmpty()) {

        } else {
            appointments.remove(0); // remove the headersForAppointmentTable
            if (appointments.isEmpty()) {

            } else {
                final String selectedItem = (String) appointmentTypesCombo.getSelectedItem();

                // perform filters
                if (!selectedItem.equalsIgnoreCase(AppointmentTypeEnum.ALL.name())) { // filter by catergory/type
                    appointments = appointments.stream()
                    .filter(item -> item.split(AppointmentManagementSystem.FILE_DELIMITER)[1].equalsIgnoreCase(selectedItem))
                    .collect(Collectors.toList());
                }

                final String dateRangeFrom = txtDateFrom.getText();
                final String dateRangeTo = txtDateTo.getText();

                if (!dateRangeFrom.isBlank() && !dateRangeFrom.isEmpty() && !dateRangeTo.isBlank() && !dateRangeTo.isEmpty()) { // filter by dates
                    appointments = appointments.stream()
                    .filter(item -> {
                        String timeSlot = item.split(AppointmentManagementSystem.FILE_DELIMITER)[2];
                        String[] timeSlotRecord = AppointmentManagementSystem.getRecordById(timeSlot, AppointmentManagementSystem.TIME_SLOTS_TXT_FILE);
                        final String dateToValidate = timeSlotRecord[2];
                        return AppointmentManagementSystem.isDateBetweenTwoDates(dateToValidate, dateRangeFrom, dateRangeTo);
                    })
                    .collect(Collectors.toList());
                }

                String[][] tableData = new String[appointments.size()][headersForAppointmentTable.length];

                int[] count = {0};
                appointments.forEach(item -> {
                    String[] i = item.split(AppointmentManagementSystem.FILE_DELIMITER);
                    tableData[count[0]][0] = i[0];
                    tableData[count[0]][1] = i[1]; // category

                    final String[] patient = AppointmentManagementSystem.getRecordById(i[4], AppointmentManagementSystem.USER_TXT_FILE);
                    if (patient != null && patient.length > 0) {
                        tableData[count[0]][2] = patient[0] + " : " + patient[3] + " " + patient[2]; // patient
                    } else {
                        tableData[count[0]][2] = i[4]; // patient
                    }

                    final String[] staff = AppointmentManagementSystem.getRecordById(i[3], AppointmentManagementSystem.USER_TXT_FILE);
                    if (staff != null && staff.length > 0) {
                        tableData[count[0]][3] = staff[0] + " : " + staff[3] + " " + staff[2]; // patient
                    } else {
                        tableData[count[0]][3] = i[3]; // staff
                    }

                    tableData[count[0]][4] = i[5]; // status
                    // TODO: get time and date

                    String[] timeSlot = AppointmentManagementSystem.getRecordById(i[2], AppointmentManagementSystem.TIME_SLOTS_TXT_FILE);
                    tableData[count[0]][5] = timeSlot[2]; // date
                    tableData[count[0]][6] = timeSlot[1]; // time from
                    tableData[count[0]][7] = timeSlot[3]; // time to

                    // between dates
                    count[0] += 1;
                });

                DefaultTableModel model = new DefaultTableModel(tableData, headersForAppointmentTable);
                appointmentsTable.setModel(model);
            }
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jButton5ActionPerformed

    private void appointmentsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_appointmentsTableMouseClicked

    }//GEN-LAST:event_appointmentsTableMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> appointmentTypesCombo;
    private javax.swing.JTable appointmentsTable;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton dateFrom;
    private javax.swing.JButton dateTo;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField txtDateFrom;
    private javax.swing.JTextField txtDateTo;
    // End of variables declaration//GEN-END:variables

    private void initializeAppointmentDetails() {
        List<String> appointments = AppointmentManagementSystem.getData(AppointmentManagementSystem.APPOINTMENT_FILE);
        if (appointments.isEmpty()) {

        } else {
            appointments.remove(0); // remove the headersForAppointmentTable
            if (appointments.isEmpty()) {

            } else {

                String[][] tableData = new String[appointments.size()][headersForAppointmentTable.length];

                int[] count = {0};
                appointments.forEach(item -> {
                    String[] i = item.split(AppointmentManagementSystem.FILE_DELIMITER);
                    tableData[count[0]][0] = i[0];
                    tableData[count[0]][1] = i[1]; // category

                    final String[] patient = AppointmentManagementSystem.getRecordById(i[4], AppointmentManagementSystem.USER_TXT_FILE);
                    if (patient != null && patient.length > 0) {
                        tableData[count[0]][2] = patient[0] + " : " + patient[3] + " " + patient[2]; // patient
                    } else {
                        tableData[count[0]][2] = i[4]; // patient
                    }

                    final String[] staff = AppointmentManagementSystem.getRecordById(i[3], AppointmentManagementSystem.USER_TXT_FILE);
                    if (staff != null && staff.length > 0) {
                        tableData[count[0]][3] = staff[0] + " : " + staff[3] + " " + staff[2]; // patient
                    } else {
                        tableData[count[0]][3] = i[3]; // staff
                    }

                    tableData[count[0]][4] = i[5]; // status
                    // TODO: get time and date

                    String[] timeSlot = AppointmentManagementSystem.getRecordById(i[2], AppointmentManagementSystem.TIME_SLOTS_TXT_FILE);
                    tableData[count[0]][5] = timeSlot[2]; // date
                    tableData[count[0]][6] = timeSlot[1]; // time from
                    tableData[count[0]][7] = timeSlot[3]; // time to

                    // between dates
                    count[0] += 1;
                });

                DefaultTableModel model = new DefaultTableModel(tableData, headersForAppointmentTable);
                appointmentsTable.setModel(model);
            }
        }
    }
}
